-- Create patient table with all columns as VARCHAR
CREATE TABLE patient (
    age VARCHAR(250) NULL,
    postcode VARCHAR(250) NULL, 
    patient_surname VARCHAR(100) NULL,
    patient_givenname VARCHAR(100) NULL,
    date_of_birth VARCHAR(50) NULL,
    date_of_death VARCHAR(50) NULL,
    registration_guid VARCHAR(50) NULL,
    patient_id VARCHAR(50) NOT NULL PRIMARY KEY,
    gender VARCHAR(50) NULL
);

-- Create observation table with all columns as VARCHAR
CREATE TABLE observation (
    abnormal VARCHAR(250) NULL,
    emis_code_id VARCHAR(250) NULL,
    comparator VARCHAR(250) NULL,
    confidential_flag VARCHAR(250) NULL,
    confidential_patient_flag VARCHAR(250) NULL,
    consultation_source_emis_code_id VARCHAR(250) NULL,
    consultation_source_emis_original_term VARCHAR(255) NULL,
    document_guid VARCHAR(250) NULL,
    dummy_patient_flag VARCHAR(250) NULL,
    effective_date VARCHAR(250) NULL,
    effective_date_precision VARCHAR(250) NULL,
    emis_enteredby_userinrole_guid VARCHAR(250) NULL,
    emis_episodicity VARCHAR(250) NULL,
    end_date VARCHAR(250) NULL,
    fhir_episodicity VARCHAR(250) NULL,
    emis_observation_guid VARCHAR(250) NULL,
    exa_observation_guid VARCHAR(250) NULL,
    fhir_interpretation_code VARCHAR(250) NULL,
    is_parent_flag VARCHAR(250) NULL,
    non_regular_and_current_active_flag VARCHAR(250) NULL,
    emis_observation_id VARCHAR(250) NULL,
    observation_type VARCHAR(250) NULL,
    emis_observationtypeid VARCHAR(250) NULL,
    opt_out_93c1_flag VARCHAR(250) NULL,
    opt_out_9nd19nu09nu4_flag VARCHAR(250) NULL,
    opt_out_9nd19nu0_flag VARCHAR(250) NULL,
    opt_out_9nu0_flag VARCHAR(250) NULL,
    other_code VARCHAR(250) NULL,
    other_code_system VARCHAR(250) NULL,
    other_display VARCHAR(250) NULL,
    range_lower VARCHAR(250) NULL,
    range_upper VARCHAR(250) NULL,
    readv2_code VARCHAR(250) NULL,
    recorded_date VARCHAR(250) NULL,
    registration_guid VARCHAR(250) NULL,
    regular_and_current_active_flag VARCHAR(250) NULL,
    regular_current_active_and_inactive_flag VARCHAR(250) NULL,
    regular_patient_flag VARCHAR(250) NULL,
    emis_original_term VARCHAR(250) NULL,
    sensitive_flag VARCHAR(250) NULL,
    sensitive_patient_flag VARCHAR(250) NULL,
    snomed_concept_id VARCHAR(250) NULL,
    snomed_description_id VARCHAR(50) NULL,
    emis_parent_observation_guid VARCHAR(250) NULL,
    exa_parent_observation_guid VARCHAR(250) NULL,
    uom VARCHAR(250) NULL,
    uom_ucum VARCHAR(250) NULL,
    user_selected VARCHAR(250) NULL,
    numericvalue VARCHAR(250) NULL,
    value_pq_2 VARCHAR(250) NULL
);

-- Create clinical_codes table with all columns as VARCHAR
CREATE TABLE clinical_codes (
    refset_simple_id VARCHAR(250) NULL,
    parent_code_id VARCHAR(250) NULL,
    code_id VARCHAR(250) NULL,
    snomed_concept_id VARCHAR(250) NULL,
    emis_term VARCHAR(1000) NULL
);

-- Create medication table with all columns as VARCHAR
CREATE TABLE medication (
    nhs_prescribing_agency VARCHAR(250) NULL,
    emis_drug_guid VARCHAR(250) NULL,
    authorisedissues_authorised_date VARCHAR(250) NULL,
    authorisedissues_first_issue_date VARCHAR(250) NULL,
    cancellation_reason VARCHAR(250) NULL,
    emis_code_id VARCHAR(250) NULL,
    confidential_flag VARCHAR(250) NULL,
    consultation_source_emis_code_id VARCHAR(250) NULL,
    consultation_source_emis_original_term VARCHAR(250) NULL,
    dose VARCHAR(250) NULL,
    emis_medication_status VARCHAR(250) NULL,
    dummy_patient_flag VARCHAR(250) NULL,
    duration_in_days VARCHAR(250) NULL,
    duration_uom VARCHAR(250) NULL,
    effective_date VARCHAR(250) NULL,
    effective_date_precision VARCHAR(250) NULL,
    emis_issue_method VARCHAR(250) NULL,
    emis_mostrecent_issue_date VARCHAR(250) NULL,
    emis_prescription_type VARCHAR(250) NULL,
    emis_registration_organisation_guid VARCHAR(250) NULL,
    emis_encounter_guid VARCHAR(250) NULL,
    exa_encounter_guid VARCHAR(250) NULL,
    end_date VARCHAR(250) NULL,
    emis_enteredby_userinrole_guid VARCHAR(250) NULL,
    exa_prescription_guid VARCHAR(250) NULL,
    estimated_nhs_cost VARCHAR(250) NULL,
    exa_drug_guid VARCHAR(250) NULL,
    medication_guid VARCHAR(250) NULL,
    exa_medication_guid VARCHAR(250) NULL,
    fhir_medication_intent VARCHAR(250) NULL,
    exa_mostrecent_issue_date VARCHAR(250) NULL,
    max_nextissue_days VARCHAR(250) NULL,
    min_nextissue_days VARCHAR(250) NULL,
    non_regular_and_current_active_flag VARCHAR(250) NULL,
    number_authorised VARCHAR(250) NULL,
    number_of_issues VARCHAR(250) NULL,
    opt_out_93c1_flag VARCHAR(250) NULL,
    opt_out_9nd19nu09nu4_flag VARCHAR(250) NULL,
    opt_out_9nd19nu0_flag VARCHAR(250) NULL,
    opt_out_9nu0_flag VARCHAR(250) NULL,
    emis_medication_organisation_guid VARCHAR(250) NULL,
    other_code VARCHAR(250) NULL,
    other_code_system VARCHAR(250) NULL,
    prescribed_as_contraceptive_flag VARCHAR(250) NULL,
    privately_prescribed_flag VARCHAR(250) NULL,
    quantity VARCHAR(250) NULL,
    recorded_date VARCHAR(250) NULL,
    registration_guid VARCHAR(250) NULL,
    regular_and_current_active_flag VARCHAR(250) NULL,
    regular_current_active_and_inactive_flag VARCHAR(250) NULL,
    regular_patient_flag VARCHAR(250) NULL,
    reimburse_type VARCHAR(250) NULL,
    review_date VARCHAR(250) NULL,
    emis_original_term VARCHAR(1000) NULL,
    sensitive_flag VARCHAR(250) NULL,
    sensitive_patient_flag VARCHAR(250) NULL,
    snomed_concept_id VARCHAR(250) NULL,
    snomed_description_id VARCHAR(250) NULL,
    fhir_medication_status VARCHAR(250) NULL,
    cancellation_date VARCHAR(250) NULL,
    nhs_prescription_type VARCHAR(250) NULL,
    uom VARCHAR(250) NULL,
    uom_dmd VARCHAR(250) NULL
);


-- Preview data from each table
SELECT TOP 10 * FROM patient;
SELECT TOP 10 * FROM observation;
SELECT TOP 10 * FROM clinical_codes;
SELECT TOP 10 * FROM medication;

-- Check patient table for NULLs
SELECT 
    COUNT(*) AS total_patients,
    SUM(CASE WHEN patient_id IS NULL THEN 1 ELSE 0 END) AS null_patient_id,
    SUM(CASE WHEN registration_guid IS NULL THEN 1 ELSE 0 END) AS null_registration_guid
FROM 
    patient;

-- Check observation table for NULLs
SELECT 
    COUNT(*) AS total_observations,
    SUM(CASE WHEN registration_guid IS NULL THEN 1 ELSE 0 END) AS null_registration_guid,
    SUM(CASE WHEN snomed_concept_id IS NULL THEN 1 ELSE 0 END) AS null_snomed_concept_id
FROM 
    observation;

-- Check medication table for NULLs
SELECT 
    COUNT(*) AS total_medications,
    SUM(CASE WHEN registration_guid IS NULL THEN 1 ELSE 0 END) AS null_registration_guid,
    SUM(CASE WHEN snomed_concept_id IS NULL THEN 1 ELSE 0 END) AS null_snomed_concept_id
FROM 
    medication;

-- Check clinical_codes table for NULLs
SELECT 
    COUNT(*) AS total_codes,
    SUM(CASE WHEN code_id IS NULL THEN 1 ELSE 0 END) AS null_code_id,
    SUM(CASE WHEN snomed_concept_id IS NULL THEN 1 ELSE 0 END) AS null_snomed_concept_id
FROM 
    clinical_codes;

-- Check for duplicate patient_id values in patient table
SELECT 
    patient_id, 
    COUNT(*) AS count
FROM 
    patient
WHERE 
    patient_id IS NOT NULL
GROUP BY 
    patient_id
HAVING 
    COUNT(*) > 1
ORDER BY 
    COUNT(*) DESC;

-- Check for duplicate registration_guid values in patient table
SELECT 
    registration_guid, 
    COUNT(*) AS count
FROM 
    patient
WHERE 
    registration_guid IS NOT NULL
GROUP BY 
    registration_guid
HAVING 
    COUNT(*) > 1
ORDER BY 
    COUNT(*) DESC;

-- Check for duplicate code_ids in clinical_codes table
SELECT 
    code_id, 
    COUNT(*) AS count
FROM 
    clinical_codes
WHERE 
    code_id IS NOT NULL
GROUP BY 
    code_id
HAVING 
    COUNT(*) > 1
ORDER BY 
    COUNT(*) DESC;

-- Handle NULLs and duplicates

-- Patient table does not have NULLs or duplicates, filtered tables are created for the rest 

-- Handle NULL values in observation table
DROP TABLE IF EXISTS observation_clean;
SELECT * INTO observation_clean
FROM observation
WHERE registration_guid IS NOT NULL 
AND snomed_concept_id IS NOT NULL;

-- Handle NULL values in medication table
DROP TABLE IF EXISTS medication_clean;
SELECT * INTO medication_clean
FROM medication
WHERE registration_guid IS NOT NULL;

-- Handle NULL values and duplicates in clinical_codes table
-- Use ROW_NUMBER to keep just one row per code_id
DROP TABLE IF EXISTS clinical_codes_clean;
SELECT * INTO clinical_codes_clean
FROM (
    SELECT *,
           ROW_NUMBER() OVER(PARTITION BY code_id ORDER BY (SELECT NULL)) AS rn
    FROM clinical_codes
    WHERE code_id IS NOT NULL 
    AND snomed_concept_id IS NOT NULL
) AS temp
WHERE rn = 1;
ALTER TABLE clinical_codes_clean -- Remove the temporary row number column
DROP COLUMN rn;

--Set up primary and foreign keys

-- Add primary keys
ALTER TABLE patient
ADD CONSTRAINT PK_patient PRIMARY KEY (patient_id);

ALTER TABLE patient
ADD CONSTRAINT UQ_patient_registration_guid UNIQUE (registration_guid);

ALTER TABLE clinical_codes_clean
ADD CONSTRAINT PK_clinical_codes_clean PRIMARY KEY (code_id);

-- Add foreign keys
ALTER TABLE observation_clean
ADD CONSTRAINT FK_observation_patient 
FOREIGN KEY (registration_guid) REFERENCES patient(registration_guid);

ALTER TABLE medication_clean
ADD CONSTRAINT FK_medication_patient
FOREIGN KEY (registration_guid) REFERENCES patient(registration_guid);
